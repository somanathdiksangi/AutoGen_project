import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import copy

def solve_sudoku(board):
    """Solves a 3x3 Sudoku puzzle using backtracking."""

    def is_safe(row, col, num):
        # Check row
        for i in range(9):
            if board[row][i] == num:
                return False

        # Check column
        for i in range(9):
            if board[i][col] == num:
                return False

        # Check 3x3 box
        start_row = row - row % 3
        start_col = col - col % 3
        for i in range(3):
            for j in range(3):
                if board[i + start_row][j + start_col] == num:
                    return False

        return True

    def solve():
        for row in range(9):
            for col in range(9):
                if board[row][col] == 0:
                    for num in range(1, 10):
                        if is_safe(row, col, num):
                            board[row][col] = num
                            if solve():
                                return True
                            board[row][col] = 0  # Backtrack
                    return False
        return True

    if solve():
        return board
    else:
        return None

def visualize_sudoku(board, filename="output.gif"):
  """Visualizes the Sudoku board and creates an animation GIF."""

  fig, ax = plt.subplots()
  im = ax.imshow(board, cmap='viridis', interpolation='nearest')  # Change to a suitable colormap
  
  def animate(i):
      ax.clear()
      im = ax.imshow(board, cmap='viridis', interpolation='nearest')  # Clear and re-plot
      plt.title("Sudoku Solution")
      return [im]
  
  anim = animation.FuncAnimation(fig, animate, frames=1, interval=1000)  # Adjust interval as needed
  anim.save(filename)

#Test cases
test_cases = [
    # Example 1:
    np.array([
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]),
      np.array([
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0]
      ]),
      np.array([
          [1, 2, 3, 4, 5, 6, 7, 8, 9],
          [4, 5, 6, 7, 8, 9, 1, 2, 3],
          [7, 8, 9, 1, 2, 3, 4, 5, 6],
          [2, 1, 4, 3, 6, 5, 8, 9, 7],
          [3, 6, 5, 8, 9, 7, 2, 1, 4],
          [8, 9, 7, 2, 1, 4, 3, 6, 5],
          [5, 3, 1, 6, 4, 8, 9, 7, 2],
          [6, 7, 2, 9, 3, 1, 5, 4, 8],
          [9, 4, 8, 5, 7, 2, 6, 3, 1]
      ])
]


for i, board in enumerate(test_cases):
    solved_board = solve_sudoku(copy.deepcopy(board)) #Use deepcopy to avoid modifying the original board
    if solved_board is not None:
        visualize_sudoku(solved_board, f"output_{i+1}.gif")
        print(f"Sudoku solution for test case {i+1} is saved as output_{i+1}.gif")
    else:
        print(f"No solution found for test case {i+1}")
