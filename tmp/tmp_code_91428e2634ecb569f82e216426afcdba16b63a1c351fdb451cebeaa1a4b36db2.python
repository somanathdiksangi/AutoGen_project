import matplotlib.pyplot as plt
import matplotlib.animation as animation
import copy

def solve_sudoku(board):
    """Solves a 3x3 Sudoku puzzle using backtracking."""

    def is_safe(row, col, num):
        # Check row
        for i in range(9):
            if board[row][i] == num:
                return False

        # Check column
        for i in range(9):
            if board[i][col] == num:
                return False

        # Check 3x3 box
        start_row = row - row % 3
        start_col = col - col % 3
        for i in range(3):
            for j in range(3):
                if board[i + start_row][j + start_col] == num:
                    return False

        return True

    def solve():
        for row in range(9):
            for col in range(9):
                if board[row][col] == 0:
                    for num in range(1, 10):
                        if is_safe(row, col, num):
                            board[row][col] = num
                            if solve():
                                return True
                            board[row][col] = 0  # Backtrack
                    return False
        return True

    if solve():
        return board
    else:
        return None

def visualize_sudoku(board, filename="output.gif"):
  """Visualizes the Sudoku board and creates an animation GIF."""
  
  fig, ax = plt.subplots()
  
  def update_board(i):
      ax.clear()  # Clear previous frame
      im = ax.imshow(board, cmap='viridis', interpolation='nearest')
      plt.title("Sudoku Solution")
      return [im]
  
  anim = animation.FuncAnimation(fig, update_board, frames=1, interval=500)  # Animate once
  anim.save(filename)
  
#Example use (you will need to define your board here):
board = np.array([
  [5, 3, 0, 0, 7, 0, 0, 0, 0],
  [6, 0, 0, 1, 9, 5, 0, 0, 0],
  [0, 9, 8, 0, 0, 0, 0, 6, 0],
  [8, 0, 0, 0, 6, 0, 0, 0, 3],
  [4, 0, 0, 8, 0, 3, 0, 0, 1],
  [7, 0, 0, 0, 2, 0, 0, 0, 6],
  [0, 6, 0, 0, 0, 0, 2, 8, 0],
  [0, 0, 0, 4, 1, 9, 0, 0, 5],
  [0, 0, 0, 0, 8, 0, 0, 7, 9]
])
import numpy as np #import numpy

solved_board = solve_sudoku(copy.deepcopy(board))
if solved_board is not None:
  visualize_sudoku(solved_board, "output.gif")
  print("Sudoku solved and GIF created!")
else:
  print("No solution found.")

